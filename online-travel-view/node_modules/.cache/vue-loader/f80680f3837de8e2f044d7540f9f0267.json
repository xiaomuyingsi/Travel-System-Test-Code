{"remainingRequest":"F:\\Java\\Code\\online-travel-view\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\Java\\Code\\online-travel-view\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\Java\\Code\\online-travel-view\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\Java\\Code\\online-travel-view\\src\\views\\user\\Scenic.vue?vue&type=template&id=aeb185e6&scoped=true&","dependencies":[{"path":"F:\\Java\\Code\\online-travel-view\\src\\views\\user\\Scenic.vue","mtime":1744882954195},{"path":"F:\\Java\\Code\\online-travel-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Java\\Code\\online-travel-view\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\Java\\Code\\online-travel-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Java\\Code\\online-travel-view\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}