{"remainingRequest":"F:\\Java\\Code\\online-travel-view\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\Java\\Code\\online-travel-view\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\Java\\Code\\online-travel-view\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\Java\\Code\\online-travel-view\\src\\views\\user\\Service.vue?vue&type=template&id=1e3ca8eb&scoped=true&","dependencies":[{"path":"F:\\Java\\Code\\online-travel-view\\src\\views\\user\\Service.vue","mtime":1744472421210},{"path":"F:\\Java\\Code\\online-travel-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Java\\Code\\online-travel-view\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\Java\\Code\\online-travel-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Java\\Code\\online-travel-view\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}